project(using_class_type_keyword) # this is the project name
cmake_minimum_required(VERSION 3.10) # version for CMake

# Set the main target name to the project name, can be changed if needed.
set(MAIN_TARGET_NAME ${PROJECT_NAME}) # this variable will be used later in this CMake 

#executable file path where a file will be generated by executed which output of the src/main.cpp can be seen
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/../bin)

# all header file( all class, function declaration). Must be included
include_directories(${PROJECT_SOURCE_DIR}/include)

# Target for the library. This contains the definition of all header file. Must be included
add_library(${MAIN_TARGET_NAME}_lib SHARED ${PROJECT_SOURCE_DIR}/src/temp_header.cpp)

# it contains the code which could be run by executing the file of /bin folder
add_executable(${MAIN_TARGET_NAME}_executable ${PROJECT_SOURCE_DIR}/src/main.cpp)

# Target lib path. When you ship your code to anyone then no need to give the source code(src/.cpp file, not main.cpp, others are mentioned here)
# so necessary is a library fiel which will contain all algorithm. Another folder will be made to show it's function/ usage
# only header file(/include folder) and this library file will be shipped to anyone
# then the reciever will make the definition(/src/*.cpp) and main.cpp file by him/herself
set_target_properties(${MAIN_TARGET_NAME}_lib PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${${PROJECT_NAME}_SOURCE_DIR}/lib)

# Link the library and executable file. it binds the main.cpp with the created lib. Also will be used when the code will be shipped
target_link_libraries(${MAIN_TARGET_NAME}_executable ${MAIN_TARGET_NAME}_lib)